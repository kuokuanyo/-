#degree=as.factor(injury_degree)
gender=as.factor(gender)
injury_position=as.factor(injury_position)
protection=as.factor(protection)
phone=as.factor(phone)
person=as.factor(person)
qualifications=as.factor(qualifications)
license=as.factor(license)
drinking=as.factor(drinking)
hit=as.factor(hit)
run_away=as.factor(run_away)
age_level=as.factor(age_level)
#重新寫成資料框架
new=data.frame(injury_degree,gender,injury_position,protection,
phone,person,qualifications,license,drinking,hit,
run_away,age_level)
attach(new)
#勝算比公式
or=exp(cbind(OR=coef(model),confint(model)))
#受傷程度
model1=glm(injury_degree~gender,family = binomial,data=new)
summary(model1)
#匯入CSV
data=read.table('/users/user/desktop/chinese.csv',
sep =',',header = T,fill = T)
attach(data)
#將變數轉成factor
#degree=as.factor(injury_degree)
gender=as.factor(gender)
injury_position=as.factor(injury_position)
protection=as.factor(protection)
phone=as.factor(phone)
person=as.factor(person)
qualifications=as.factor(qualifications)
license=as.factor(license)
drinking=as.factor(drinking)
hit=as.factor(hit)
run_away=as.factor(run_away)
age_level=as.factor(age_level)
#重新寫成資料框架
new=data.frame(injury_degree,gender,injury_position,protection,
phone,person,qualifications,license,drinking,hit,
run_away,age_level)
attach(new)
#勝算比公式
or=exp(cbind(OR=coef(model),confint(model)))
#受傷程度
model1=glm(injury_degree~gender,family = binomial,data=new)
summary(model1)
View(new)
#匯入CSV
data=read.table('/users/user/desktop/degree.csv',
sep =',',header = T,fill = T)
attach(data)
#將變數轉成factor
#degree=as.factor(injury_degree)
gender=as.factor(gender)
injury_position=as.factor(injury_position)
protection=as.factor(protection)
phone=as.factor(phone)
person=as.factor(person)
qualifications=as.factor(qualifications)
license=as.factor(license)
drinking=as.factor(drinking)
hit=as.factor(hit)
run_away=as.factor(run_away)
age_level=as.factor(age_level)
#重新寫成資料框架
new=data.frame(injury_degree,gender,injury_position,protection,
phone,person,qualifications,license,drinking,hit,
run_away,age_level)
attach(new)
#勝算比公式
or=exp(cbind(OR=coef(model),confint(model)))
#受傷程度
model1=glm(injury_degree~gender,family = binomial,data=new)
summary(model1)
#匯入CSV
data=read.table('/users/user/desktop/finally.csv',
sep =',',header = T,fill = T)
attach(data)
#匯入CSV
data=read.table('/users/user/desktop/finally.csv',
sep =',',header = T,fill = T)
#匯入CSV
data=read.table('/users/user/desktop/finally.csv',
sep =',',header = T,fill = T,,fileEncoding ="UTF-8")
attach(data)
#受傷程度
model1=glm(injury_degree~gender,family = binomial,data=new)
#將變數轉成factor
#degree=as.factor(injury_degree)
gender=as.factor(gender)
injury_position=as.factor(injury_position)
protection=as.factor(protection)
phone=as.factor(phone)
person=as.factor(person)
qualifications=as.factor(qualifications)
license=as.factor(license)
drinking=as.factor(drinking)
hit=as.factor(hit)
run_away=as.factor(run_away)
age_level=as.factor(age_level)
#重新寫成資料框架
new=data.frame(injury_degree,gender,injury_position,protection,
phone,person,qualifications,license,drinking,hit,
run_away,age_level)
attach(new)
#勝算比公式
or=exp(cbind(OR=coef(model),confint(model)))
#受傷程度
model1=glm(injury_degree~gender,family = binomial,data=new)
#匯入CSV
data=read.table('/users/user/desktop/chinese.csv',
sep =',',header = T,fill = T)
attach(data)
View(data)
#將變數轉成factor
#degree=as.factor(injury_degree)
gender=as.factor(gender)
injury_position=as.factor(injury_position)
protection=as.factor(protection)
phone=as.factor(phone)
person=as.factor(person)
qualifications=as.factor(qualifications)
license=as.factor(license)
drinking=as.factor(drinking)
hit=as.factor(hit)
run_away=as.factor(run_away)
age_level=as.factor(age_level)
#重新寫成資料框架
new=data.frame(injury_degree,gender,injury_position,protection,
phone,person,qualifications,license,drinking,hit,
run_away,age_level)
attach(new)
#勝算比公式
or=exp(cbind(OR=coef(model),confint(model)))
#受傷程度
model1=glm(injury_degree~gender,family = binomial,data=new)
summary(model1)
or=exp(cbind(OR=coef(model1),confint(model1)))
View(or)
View(or)
or
#匯入CSV
data=read.table('/users/user/desktop/degree.csv',
sep =',',header = T,fill = T)
attach(data)
#將變數轉成factor
#degree=as.factor(injury_degree)
gender=as.factor(gender)
injury_position=as.factor(injury_position)
protection=as.factor(protection)
phone=as.factor(phone)
person=as.factor(person)
qualifications=as.factor(qualifications)
license=as.factor(license)
drinking=as.factor(drinking)
hit=as.factor(hit)
run_away=as.factor(run_away)
#將變數轉成factor
degree=as.factor(injury_degree)
gender=as.factor(gender)
injury_position=as.factor(injury_position)
protection=as.factor(protection)
phone=as.factor(phone)
person=as.factor(person)
qualifications=as.factor(qualifications)
license=as.factor(license)
drinking=as.factor(drinking)
hit=as.factor(hit)
run_away=as.factor(run_away)
age_level=as.factor(age_level)
#重新寫成資料框架
new=data.frame(injury_degree,gender,injury_position,protection,
phone,person,qualifications,license,drinking,hit,
run_away,age_level)
attach(new)
#勝算比公式
or=exp(cbind(OR=coef(model),confint(model)))
#受傷程度
model1=glm(injury_degree~gender,family = binomial,data=new)
summary(model1)
or=exp(cbind(OR=coef(model1),confint(model1)))
or
#匯入CSV
data=read.table('/users/user/desktop/degree.csv',
sep =',',header = T,fill = T)
attach(data)
#將變數轉成factor
degree=as.factor(injury_degree)
gender=as.factor(gender)
injury_position=as.factor(injury_position)
protection=as.factor(protection)
phone=as.factor(phone)
person=as.factor(person)
qualifications=as.factor(qualifications)
license=as.factor(license)
drinking=as.factor(drinking)
hit=as.factor(hit)
run_away=as.factor(run_away)
age_level=as.factor(age_level)
#重新寫成資料框架
new=data.frame(injury_degree,gender,injury_position,protection,
phone,person,qualifications,license,drinking,hit,
run_away,age_level)
attach(new)
#勝算比公式
or=exp(cbind(OR=coef(model),confint(model)))
#受傷程度
model1=glm(injury_degree~gender,family = binomial,data=new)
summary(model1)
or=exp(cbind(OR=coef(model1),confint(model1)))
or
#匯入CSV
data=read.table('/users/user/desktop/chinese.csv',
sep =',',header = T,fill = T)
attach(data)
#將變數轉成factor
degree=as.factor(injury_degree)
gender=as.factor(gender)
injury_position=as.factor(injury_position)
protection=as.factor(protection)
phone=as.factor(phone)
person=as.factor(person)
qualifications=as.factor(qualifications)
license=as.factor(license)
drinking=as.factor(drinking)
hit=as.factor(hit)
run_away=as.factor(run_away)
age_level=as.factor(age_level)
#重新寫成資料框架
new=data.frame(injury_degree,gender,injury_position,protection,
phone,person,qualifications,license,drinking,hit,
run_away,age_level)
attach(new)
#勝算比公式
or=exp(cbind(OR=coef(model),confint(model)))
#受傷程度
model1=glm(injury_degree~gender,family = binomial,data=new)
summary(model1)
or=exp(cbind(OR=coef(model1),confint(model1)))
#受傷程度
model1=glm(injury_degree~gender,family = binomial,data=new)
summary(model1)
#匯入CSV
data=read.table('/users/user/desktop/chinese.csv',
sep =',',header = T,fill = T)
attach(data)
#將變數轉成factor
degree=as.factor(injury_degree)
gender=as.factor(gender)
injury_position=as.factor(injury_position)
protection=as.factor(protection)
phone=as.factor(phone)
person=as.factor(person)
qualifications=as.factor(qualifications)
license=as.factor(license)
drinking=as.factor(drinking)
hit=as.factor(hit)
run_away=as.factor(run_away)
age_level=as.factor(age_level)
#重新寫成資料框架
new=data.frame(injury_degree,gender,injury_position,protection,
phone,person,qualifications,license,drinking,hit,
run_away,age_level)
attach(new)
#勝算比公式
or=exp(cbind(OR=coef(model),confint(model)))
#受傷程度
model1=glm(injury_degree~gender,family = binomial,data=new)
summary(model1)
#匯入CSV
data=read.table('/users/user/desktop/degree.csv',
sep =',',header = T,fill = T)
attach(data)
#將變數轉成factor
degree=as.factor(injury_degree)
gender=as.factor(gender)
injury_position=as.factor(injury_position)
protection=as.factor(protection)
phone=as.factor(phone)
person=as.factor(person)
qualifications=as.factor(qualifications)
license=as.factor(license)
drinking=as.factor(drinking)
hit=as.factor(hit)
run_away=as.factor(run_away)
age_level=as.factor(age_level)
#重新寫成資料框架
new=data.frame(injury_degree,gender,injury_position,protection,
phone,person,qualifications,license,drinking,hit,
run_away,age_level)
attach(new)
#勝算比公式
or=exp(cbind(OR=coef(model),confint(model)))
#受傷程度
model1=glm(injury_degree~gender,family = binomial,data=new)
summary(model1)
or=exp(cbind(OR=coef(model1),confint(model1)))
or
setwd("C:/Users/User/Desktop/machine-learning/邏輯迴歸")
#讀取資料
data = read.csv('social_network_ads.csv')
data = data[, 3:5]
#訓練測試集
library(caTools)
set.seed(123)
split = sample.split(data$Purchased, SplitRatio = 0.75)
train_set = subset(data, split == TRUE)
test_set = subset(data, split == FALSE)
#特徵縮放(對1, 2欄)
train_set[, 1:2] = scale(train_set[, 1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
#建立模型
attach(data)
model = glm(Purchased ~ .,data = train_set, family = binomial)
summary(model)
#預測
prod_pred = predict(model, type = 'response', test_set[-3])
y_pred = ifelse(prod_pred > 0.5, 1, 0)
#製作confusion matrix
cm = table(test_set[, 3], y_pred)
#畫圖
library(ElemStatLearn)
#設置set方便以後要畫測試及時只需改一個值
set = train_set
#設置set方便以後要畫測試及時只需改一個值
set = train_set
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.1)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.1)
#找出所有可能性列表
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(model, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
#畫出所有集的值
plot(set[, -3],
main = 'Classifier (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(x1), ylim = range(x2))
#畫出水平輪廓圖
contour(x1, x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
#畫出水平輪廓圖
contour(x1, x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
#將網格區域畫出
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'green', 'red'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
#間隔越小，系統會跑越久
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.1)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.1)
#找出所有可能性列表
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(model, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
#畫出所有集的值
plot(set[, -3],
main = 'Classifier (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(x1), ylim = range(x2))
#將點上色
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
#間隔越小，系統會跑越久
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.05)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.05)
#找出所有可能性列表
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(model, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
#畫出所有集的值
plot(set[, -3],
main = 'Classifier (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(x1), ylim = range(x2))
#畫出水平輪廓圖
contour(x1, x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
#將網格區域畫出
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'green', 'red'))
#將點上色
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
#間隔越小，系統會跑越久
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
#找出所有可能性列表
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(model, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
#畫出所有集的值
plot(set[, -3],
main = 'Classifier (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(x1), ylim = range(x2))
#畫出水平輪廓圖
contour(x1, x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
#將網格區域畫出
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'green', 'red'))
#將點上色
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'orange', 'blue'))
#將點上色
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'orange', 'blue'))
#間隔越小，系統會跑越久
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.05)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.05)
#找出所有可能性列表
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(model, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
#畫出所有集的值
plot(set[, -3],
main = 'Classifier (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(x1), ylim = range(x2))
#畫出水平輪廓圖
contour(x1, x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
#將網格區域畫出
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'green', 'red'))
#將點上色
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'orange', 'blue'))
#設置set方便以後要畫測試及時只需改一個值
set = train_set
#間隔越小，系統會跑越久
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.05)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.05)
#找出所有可能性列表
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(model, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
#畫出所有集的值
plot(set[, -3],
main = 'Classifier (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(x1), ylim = range(x2))
#畫出水平輪廓圖
#contour(x1, x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
#將網格區域畫出
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'green', 'red'))
#將點上色
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'orange', 'blue'))
#畫圖
library(ElemStatLearn)
#設置set方便以後要畫測試及時只需改一個值
set = train_set
#間隔越小，系統會跑越久
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.05)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.05)
#找出所有可能性列表
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(model, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
#畫出所有集的值
plot(set[, -3],
main = 'Classifier (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(x1), ylim = range(x2))
#畫出水平輪廓圖
contour(x1, x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
#將網格區域畫出
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'green', 'red'))
#將點上色
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'orange', 'blue'))
test_set
test_set
test_set
test_set
test_set
test_set
test_set
test_set
#測試集
set = test_set
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.05)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.05)
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(model, type = 'response', newdata = grid_set)
y_pred = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Classifier (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(x1), ylim = range(x2))
contour(x1, x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'green', 'red'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'orange', 'blue'))
#測試集
set = test_set
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.05)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.05)
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(model, type = 'response', newdata = grid_set)
y_pred = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Classifier (test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(x1), ylim = range(x2))
contour(x1, x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Classifier (test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(x1), ylim = range(x2))
contour(x1, x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'green', 'red'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'orange', 'blue'))
prob_set
