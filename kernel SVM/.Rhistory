#建立SVM模型
attach(data)
library(e1071)
model = svm(Purchased ~ ., data = train_set,
type = 'C-classification', kernel = 'linear')
#預測測試集
y_pred = predict(model, newdata = test_set[-3])
#混淆矩陣(看正確機率)
cm = table(test_set[,3], y_pred) #80%
#視覺化
library(ElemStatLearn)
set = train_set
#-1, +1 兩邊留白(多一個單位)
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.0075)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.0075)
#畫所有網格
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
#預測所有網格的值
y_grid = predict(model, newdata = grid_set)
#kernel SVM
#read_csv
data = read.csv('social_network_ads.csv')
data = data[3:5]
#訓練測試集
library(caTools)
set.seed(123)
split = sample.split(data$Purchased, SplitRatio = 0.75)
train_set = subset(data, split = TRUE)
test_set = subset(data, split = FALSE)
#特徵縮放(x)
train_set[-3] = scale(train_set[-3])
test_set[-3] = scale(test_set[-3])
#建立kernel SVM模型
#對train建立
library(e1071)
attach(data)
model = svm(Purchased ~ ., data = train_set,
type = 'C-classification', kernel = 'radial')
#預測測試集結果
y_pred = predict(model, test_set[-3])
#查看正確率
cm = table(test_set[, 3], y_pred)
#視覺化
#train_set
library(ElemStatLearn)
set = train_set
#建立網格
#-1, +1 使兩邊留白
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(x1, x2)
colnames = c('Age', 'Estimated Salary')
#預測網格的數值
y_grid = predict(model, newdata = grid_set)
View(grid_set)
View(grid_set)
colnames(grid_set) = c('Age', 'Estimated Salary')
#預測網格的數值
y_grid = predict(model, newdata = grid_set)
#建立網格
#-1, +1 使兩邊留白
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('Age', 'Estimated Salary')
View(grid_set)
#預測網格的數值
y_grid = predict(model, newdata = grid_set)
#kernel SVM
#read_csv
data = read.csv('social_network_ads.csv')
data = data[3:5]
#訓練測試集
library(caTools)
set.seed(123)
split = sample.split(data$Purchased, SplitRatio = 0.75)
train_set = subset(data, split = TRUE)
test_set = subset(data, split = FALSE)
#特徵縮放(x)
train_set[-3] = scale(train_set[-3])
test_set[-3] = scale(test_set[-3])
#建立kernel SVM模型
#對train建立
library(e1071)
attach(data)
model = svm(Purchased ~ ., data = train_set,
type = 'C-classification', kernel = 'radial')
#預測測試集結果
y_pred = predict(model, test_set[-3])
#查看正確率
cm = table(test_set[, 3], y_pred)
#視覺化
#train_set
library(ElemStatLearn)
set = train_set
#建立網格
#-1, +1 使兩邊留白
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('Age', 'Estimated Salary')
#預測網格的數值
y_grid = predict(model, newdata = grid_set)
colnames(grid_set) = c('Age', 'EstimatedSalary')
#預測網格的數值
y_grid = predict(model, newdata = grid_set)
colnames(grid_set) = c('Age', 'EstimatedSalar y')
#預測網格的數值
y_grid = predict(model, newdata = grid_set)
View(model)
View(data)
#畫圖
plot(set[, -3],
main = 'kernel SVM (train set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(x1), ylim = range(x2))
#水平線
contour(x1, x2, matrix(as.numeric(y_grid),length(x1), length(x2)), add = TRUE)
#將平分區域上色
points(grid_set, pch = '.', col = ifelse(y_grid ==1, 'red', 'green'))
#將平分區域上色
points(grid_set, pch = '.', col = ifelse(y_grid ==1, 'red', 'green'))
#kernel SVM
#read_csv
data = read.csv('social_network_ads.csv')
data = data[3:5]
#訓練測試集
library(caTools)
set.seed(123)
split = sample.split(data$Purchased, SplitRatio = 0.75)
train_set = subset(data, split = TRUE)
test_set = subset(data, split = FALSE)
#特徵縮放(x)
train_set[-3] = scale(train_set[-3])
test_set[-3] = scale(test_set[-3])
#建立kernel SVM模型
#對train建立
library(e1071)
attach(data)
model = svm(Purchased ~ ., data = train_set,
type = 'C-classification', kernel = 'radial')
#預測測試集結果
y_pred = predict(model, test_set[-3])
#查看正確率
cm = table(test_set[, 3], y_pred)
#視覺化
#train_set
library(ElemStatLearn)
set = train_set
#建立網格
#-1, +1 使兩邊留白
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.0075)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.0075)
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
#預測網格的數值
y_grid = predict(model, newdata = grid_set)
#畫點
plot(set[, -3],
main = 'kernel SVM (train set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(x1), ylim = range(x2))
#水平線
contour(x1, x2, matrix(as.numeric(y_grid),length(x1), length(x2)), add = TRUE)
#將平分區域上色
points(grid_set, pch = '.', col = ifelse(y_grid ==1, 'red', 'green'))
#將點上色
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'orange', 'blue'))
#kernel SVM
#read_csv
data = read.csv('social_network_ads.csv')
data = data[3:5]
#訓練測試集
library(caTools)
set.seed(123)
split = sample.split(data$Purchased, SplitRatio = 0.75)
train_set = subset(data, split = TRUE)
test_set = subset(data, split = FALSE)
#特徵縮放(x)
train_set[-3] = scale(train_set[-3])
test_set[-3] = scale(test_set[-3])
#建立kernel SVM模型
#對train建立
library(e1071)
attach(data)
model = svm(Purchased ~ ., data = train_set,
type = 'C-classification', kernel = 'radial')
#預測測試集結果
y_pred = predict(model, test_set[-3])
#查看正確率
cm = table(test_set[, 3], y_pred)
#視覺化
#train_set
library(ElemStatLearn)
set = train_set
#建立網格
#-1, +1 使兩邊留白
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.0075)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.0075)
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
#預測網格的數值
y_grid = predict(model, newdata = grid_set)
#畫點
plot(set[, -3],
main = 'kernel SVM (train set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(x1), ylim = range(x2))
#水平線
contour(x1, x2, matrix(as.numeric(y_grid),length(x1), length(x2)), add = TRUE)
#將平分區域上色
points(grid_set, pch = '.', col = ifelse(y_grid != 1, 'red', 'green'))
#將點上色
points(set, pch = 21, bg = ifelse(set[, 3] != 1, 'orange', 'blue'))
#read
data = read.csv('Social_Network_Ads.csv')
data = data[, 3:5]
#訓練測試集
library(caTools)
set.seed(123)
split = sample.split(data$Purchased, SplitRatio = 0.75)
train_set = subset(data, split = TRUE)
test_set = subset(data, split = FALSE)
#特徵縮放
train_set[, -3] = scale(train_set[, -3])
test_set[, -3] = scale(test_set[, -3])
#read
data = read.csv('Social_Network_Ads.csv')
data = data[, 3:5]
#因貝式分類沒有將y自動轉換成因子
data$Purchased = factor(data$Purchased, levels = c(0, 1))
#訓練測試集
library(caTools)
set.seed(123)
split = sample.split(data$Purchased, SplitRatio = 0.75)
train_set = subset(data, split = TRUE)
test_set = subset(data, split = FALSE)
#特徵縮放
train_set[, -3] = scale(train_set[, -3])
test_set[, -3] = scale(test_set[, -3])
#建立貝式分類模型
library(e1071)
model = naiveBayes(x = train_set[, -3],
y = train_set[, 3])
#預測測試集
y_pred = predict(model, train_set)
#查看正確率
cm = table(test_set[, -3], y_pred)
y_pred
#read
data = read.csv('Social_Network_Ads.csv')
data = data[, 3:5]
#因貝式分類沒有將y自動轉換成因子
data$Purchased = factor(data$Purchased, levels = c(0, 1))
#訓練測試集
library(caTools)
set.seed(123)
split = sample.split(data$Purchased, SplitRatio = 0.75)
train_set = subset(data, split = TRUE)
test_set = subset(data, split = FALSE)
#特徵縮放
train_set[, -3] = scale(train_set[, -3])
test_set[, -3] = scale(test_set[, -3])
#建立貝式分類模型
library(e1071)
model = naiveBayes(x = train_set[, -3],
y = train_set[, 3])
#預測測試集
y_pred = predict(model, train_set)
#查看正確率
cm = table(test_set[, 3], y_pred)
#read
data = read.csv('Social_Network_Ads.csv')
data = data[, 3:5]
#因貝式分類沒有將y自動轉換成因子
data$Purchased = factor(data$Purchased, levels = c(0, 1))
#訓練測試集
library(caTools)
set.seed(123)
split = sample.split(data$Purchased, SplitRatio = 0.75)
train_set = subset(data, split = TRUE)
test_set = subset(data, split = FALSE)
#特徵縮放
train_set[, -3] = scale(train_set[, -3])
test_set[, -3] = scale(test_set[, -3])
#建立貝式分類模型
library(e1071)
model = naiveBayes(x = train_set[, -3],
y = train_set[, 3])
#預測測試集
y_pred = predict(model, train_set)
#查看正確率
cm = table(test_set[, 3], y_pred)
#視覺化
#train_set
library(ElemStatLearn)
set = train_set
#建立網格
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.0075)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.0075)
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
#預測網格值y
y_grid = predict(model, grid_set)
#畫訓練集的點
plot(set[, -3],
main = 'Naive Bayes (train set)',
xlab = 'Age', ylab = 'EstimatedSalary',
xlim = range(x1), ylim = range(x2))
#分界線
contour(x1, x2, matrix(as.numeric(y_pred),length(x1),length(x2)),add = TRUE)
#分界區域填色
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'green', 'red'))
#將點上色
points(set[, -3], pch = 21, bg = ifelse(set[, 3] == 1, 'blue', 'orange'))
data = read.csv('Social_Network_Ads.csv')
data = data[, 3:5]
#因貝式分類沒有將y自動轉換成因子
data$Purchased = factor(data$Purchased, levels = c(0, 1))
#訓練測試集
library(caTools)
set.seed(123)
split = sample.split(data$Purchased, SplitRatio = 0.75)
train_set = subset(data, split = TRUE)
test_set = subset(data, split = FALSE)
#特徵縮放
train_set[, -3] = scale(train_set[, -3])
test_set[, -3] = scale(test_set[, -3])
#建立貝式分類模型
library(e1071)
model = naiveBayes(x = train_set[, -3],
y = train_set[, 3])
#預測測試集
y_pred = predict(model, train_set)
#查看正確率
cm = table(test_set[, 3], y_pred)
#視覺化
#train_set
library(ElemStatLearn)
set = train_set
#建立網格
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.1)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.1)
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
#預測網格值y
y_grid = predict(model, grid_set)
#畫訓練集的點
plot(set[, -3],
main = 'Naive Bayes (train set)',
xlab = 'Age', ylab = 'EstimatedSalary',
xlim = range(x1), ylim = range(x2))
#分界線
contour(x1, x2, matrix(as.numeric(y_pred), length(x1),length(x2)), add = TRUE)
#分界區域填色
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'green', 'red'))
#將點上色
points(set[, -3], pch = 21, bg = ifelse(set[, 3] == 1, 'blue', 'orange'))
#read
data = read.csv('Social_Network_Ads.csv')
data = data[, 3:5]
#因貝式分類沒有將y自動轉換成因子
data$Purchased = factor(data$Purchased, levels = c(0, 1))
#訓練測試集
library(caTools)
set.seed(123)
split = sample.split(data$Purchased, SplitRatio = 0.75)
train_set = subset(data, split = TRUE)
test_set = subset(data, split = FALSE)
#特徵縮放
train_set[, -3] = scale(train_set[, -3])
test_set[, -3] = scale(test_set[, -3])
#建立貝式分類模型
library(e1071)
model = naiveBayes(x = train_set[, -3],
y = train_set[, 3])
#預測測試集
y_pred = predict(model, train_set)
#查看正確率
cm = table(test_set[, 3], y_pred)
#視覺化
#train_set
library(ElemStatLearn)
set = train_set
#建立網格
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.1)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.1)
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
#預測網格值y
y_grid = predict(model, grid_set)
#畫訓練集的點
plot(set[, -3],
main = 'Naive Bayes (train set)',
xlab = 'Age', ylab = 'EstimatedSalary',
xlim = range(x1), ylim = range(x2))
#分界線
contour(x1, x2, matrix(as.numeric(y_pred), length(x1),length(x2)), add = TRUE)
#分界線
contour(x1, x2, matrix(as.numeric(y_grid), length(x1),length(x2)), add = TRUE)
#畫訓練集的點
plot(set[, -3],
main = 'Naive Bayes (train set)',
xlab = 'Age', ylab = 'EstimatedSalary',
xlim = range(x1), ylim = range(x2))
#分界線
contour(x1, x2, matrix(as.numeric(y_grid), length(x1),length(x2)), add = TRUE)
#分界區域填色
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'green', 'red'))
#read
data = read.csv('Social_Network_Ads.csv')
data = data[, 3:5]
#因貝式分類沒有將y自動轉換成因子
data$Purchased = factor(data$Purchased, levels = c(0, 1))
#訓練測試集
library(caTools)
set.seed(123)
split = sample.split(data$Purchased, SplitRatio = 0.75)
train_set = subset(data, split = TRUE)
test_set = subset(data, split = FALSE)
#特徵縮放
train_set[, -3] = scale(train_set[, -3])
test_set[, -3] = scale(test_set[, -3])
#建立貝式分類模型
library(e1071)
model = naiveBayes(x = train_set[, -3],
y = train_set[, 3])
#預測測試集
y_pred = predict(model, train_set)
#查看正確率
cm = table(test_set[, 3], y_pred)
#視覺化
#train_set
library(ElemStatLearn)
set = train_set
#建立網格
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.1)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.1)
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
#預測網格值y
y_grid = predict(model, grid_set)
#畫訓練集的點
plot(set[, -3],
main = 'Naive Bayes (train set)',
xlab = 'Age', ylab = 'EstimatedSalary',
xlim = range(x1), ylim = range(x2))
#分界線
contour(x1, x2, matrix(as.numeric(y_grid), length(x1),length(x2)), add = TRUE)
#分界區域填色
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'green', 'red'))
#將點上色
points(set[, -3], pch = 21, bg = ifelse(set[, 3] == 1, 'blue', 'orange'))
#read
data = read.csv('Social_Network_Ads.csv')
data = data[, 3:5]
#因貝式分類沒有將y自動轉換成因子
data$Purchased = factor(data$Purchased, levels = c(0, 1))
#訓練測試集
library(caTools)
set.seed(123)
split = sample.split(data$Purchased, SplitRatio = 0.75)
train_set = subset(data, split = TRUE)
test_set = subset(data, split = FALSE)
#特徵縮放
train_set[, -3] = scale(train_set[, -3])
test_set[, -3] = scale(test_set[, -3])
#建立貝式分類模型
library(e1071)
model = naiveBayes(x = train_set[, -3],
y = train_set[, 3])
#預測測試集
y_pred = predict(model, train_set)
#查看正確率
cm = table(test_set[, 3], y_pred)
#視覺化
#train_set
library(ElemStatLearn)
set = train_set
#建立網格
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.0075)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.0075)
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
#預測網格值y
y_grid = predict(model, grid_set)
#畫訓練集的點
plot(set[, -3],
main = 'Naive Bayes (train set)',
xlab = 'Age', ylab = 'EstimatedSalary',
xlim = range(x1), ylim = range(x2))
#分界線
contour(x1, x2, matrix(as.numeric(y_grid), length(x1),length(x2)), add = TRUE)
#分界區域填色
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'green', 'red'))
#將點上色
points(set[, -3], pch = 21, bg = ifelse(set[, 3] == 1, 'blue', 'orange'))
#test_set
set = test_set
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.0075)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.0075)
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(model, grid_set)
plot(set[, -3],
main = 'Naive Bayes (test set)',
xlab = 'Age', ylab = 'EstimatedSalary',
xlim = range(x1), ylim = range(x2))
contour(x1, x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'green', 'red'))
points(set[, -3], pch = 21, bg = ifelse(set[, 3] == 1, 'blue', 'orange'))
