#勝算比公式
or=exp(cbind(OR=coef(model),confint(model)))
#受傷程度
model1=glm(injury_degree~gender,family = binomial,data=new)
summary(model1)
View(new)
#匯入CSV
data=read.table('/users/user/desktop/degree.csv',
sep =',',header = T,fill = T)
attach(data)
#將變數轉成factor
#degree=as.factor(injury_degree)
gender=as.factor(gender)
injury_position=as.factor(injury_position)
protection=as.factor(protection)
phone=as.factor(phone)
person=as.factor(person)
qualifications=as.factor(qualifications)
license=as.factor(license)
drinking=as.factor(drinking)
hit=as.factor(hit)
run_away=as.factor(run_away)
age_level=as.factor(age_level)
#重新寫成資料框架
new=data.frame(injury_degree,gender,injury_position,protection,
phone,person,qualifications,license,drinking,hit,
run_away,age_level)
attach(new)
#勝算比公式
or=exp(cbind(OR=coef(model),confint(model)))
#受傷程度
model1=glm(injury_degree~gender,family = binomial,data=new)
summary(model1)
#匯入CSV
data=read.table('/users/user/desktop/finally.csv',
sep =',',header = T,fill = T)
attach(data)
#匯入CSV
data=read.table('/users/user/desktop/finally.csv',
sep =',',header = T,fill = T)
#匯入CSV
data=read.table('/users/user/desktop/finally.csv',
sep =',',header = T,fill = T,,fileEncoding ="UTF-8")
attach(data)
#受傷程度
model1=glm(injury_degree~gender,family = binomial,data=new)
#將變數轉成factor
#degree=as.factor(injury_degree)
gender=as.factor(gender)
injury_position=as.factor(injury_position)
protection=as.factor(protection)
phone=as.factor(phone)
person=as.factor(person)
qualifications=as.factor(qualifications)
license=as.factor(license)
drinking=as.factor(drinking)
hit=as.factor(hit)
run_away=as.factor(run_away)
age_level=as.factor(age_level)
#重新寫成資料框架
new=data.frame(injury_degree,gender,injury_position,protection,
phone,person,qualifications,license,drinking,hit,
run_away,age_level)
attach(new)
#勝算比公式
or=exp(cbind(OR=coef(model),confint(model)))
#受傷程度
model1=glm(injury_degree~gender,family = binomial,data=new)
#匯入CSV
data=read.table('/users/user/desktop/chinese.csv',
sep =',',header = T,fill = T)
attach(data)
View(data)
#將變數轉成factor
#degree=as.factor(injury_degree)
gender=as.factor(gender)
injury_position=as.factor(injury_position)
protection=as.factor(protection)
phone=as.factor(phone)
person=as.factor(person)
qualifications=as.factor(qualifications)
license=as.factor(license)
drinking=as.factor(drinking)
hit=as.factor(hit)
run_away=as.factor(run_away)
age_level=as.factor(age_level)
#重新寫成資料框架
new=data.frame(injury_degree,gender,injury_position,protection,
phone,person,qualifications,license,drinking,hit,
run_away,age_level)
attach(new)
#勝算比公式
or=exp(cbind(OR=coef(model),confint(model)))
#受傷程度
model1=glm(injury_degree~gender,family = binomial,data=new)
summary(model1)
or=exp(cbind(OR=coef(model1),confint(model1)))
View(or)
View(or)
or
#匯入CSV
data=read.table('/users/user/desktop/degree.csv',
sep =',',header = T,fill = T)
attach(data)
#將變數轉成factor
#degree=as.factor(injury_degree)
gender=as.factor(gender)
injury_position=as.factor(injury_position)
protection=as.factor(protection)
phone=as.factor(phone)
person=as.factor(person)
qualifications=as.factor(qualifications)
license=as.factor(license)
drinking=as.factor(drinking)
hit=as.factor(hit)
run_away=as.factor(run_away)
#將變數轉成factor
degree=as.factor(injury_degree)
gender=as.factor(gender)
injury_position=as.factor(injury_position)
protection=as.factor(protection)
phone=as.factor(phone)
person=as.factor(person)
qualifications=as.factor(qualifications)
license=as.factor(license)
drinking=as.factor(drinking)
hit=as.factor(hit)
run_away=as.factor(run_away)
age_level=as.factor(age_level)
#重新寫成資料框架
new=data.frame(injury_degree,gender,injury_position,protection,
phone,person,qualifications,license,drinking,hit,
run_away,age_level)
attach(new)
#勝算比公式
or=exp(cbind(OR=coef(model),confint(model)))
#受傷程度
model1=glm(injury_degree~gender,family = binomial,data=new)
summary(model1)
or=exp(cbind(OR=coef(model1),confint(model1)))
or
#匯入CSV
data=read.table('/users/user/desktop/degree.csv',
sep =',',header = T,fill = T)
attach(data)
#將變數轉成factor
degree=as.factor(injury_degree)
gender=as.factor(gender)
injury_position=as.factor(injury_position)
protection=as.factor(protection)
phone=as.factor(phone)
person=as.factor(person)
qualifications=as.factor(qualifications)
license=as.factor(license)
drinking=as.factor(drinking)
hit=as.factor(hit)
run_away=as.factor(run_away)
age_level=as.factor(age_level)
#重新寫成資料框架
new=data.frame(injury_degree,gender,injury_position,protection,
phone,person,qualifications,license,drinking,hit,
run_away,age_level)
attach(new)
#勝算比公式
or=exp(cbind(OR=coef(model),confint(model)))
#受傷程度
model1=glm(injury_degree~gender,family = binomial,data=new)
summary(model1)
or=exp(cbind(OR=coef(model1),confint(model1)))
or
#匯入CSV
data=read.table('/users/user/desktop/chinese.csv',
sep =',',header = T,fill = T)
attach(data)
#將變數轉成factor
degree=as.factor(injury_degree)
gender=as.factor(gender)
injury_position=as.factor(injury_position)
protection=as.factor(protection)
phone=as.factor(phone)
person=as.factor(person)
qualifications=as.factor(qualifications)
license=as.factor(license)
drinking=as.factor(drinking)
hit=as.factor(hit)
run_away=as.factor(run_away)
age_level=as.factor(age_level)
#重新寫成資料框架
new=data.frame(injury_degree,gender,injury_position,protection,
phone,person,qualifications,license,drinking,hit,
run_away,age_level)
attach(new)
#勝算比公式
or=exp(cbind(OR=coef(model),confint(model)))
#受傷程度
model1=glm(injury_degree~gender,family = binomial,data=new)
summary(model1)
or=exp(cbind(OR=coef(model1),confint(model1)))
#受傷程度
model1=glm(injury_degree~gender,family = binomial,data=new)
summary(model1)
#匯入CSV
data=read.table('/users/user/desktop/chinese.csv',
sep =',',header = T,fill = T)
attach(data)
#將變數轉成factor
degree=as.factor(injury_degree)
gender=as.factor(gender)
injury_position=as.factor(injury_position)
protection=as.factor(protection)
phone=as.factor(phone)
person=as.factor(person)
qualifications=as.factor(qualifications)
license=as.factor(license)
drinking=as.factor(drinking)
hit=as.factor(hit)
run_away=as.factor(run_away)
age_level=as.factor(age_level)
#重新寫成資料框架
new=data.frame(injury_degree,gender,injury_position,protection,
phone,person,qualifications,license,drinking,hit,
run_away,age_level)
attach(new)
#勝算比公式
or=exp(cbind(OR=coef(model),confint(model)))
#受傷程度
model1=glm(injury_degree~gender,family = binomial,data=new)
summary(model1)
#匯入CSV
data=read.table('/users/user/desktop/degree.csv',
sep =',',header = T,fill = T)
attach(data)
#將變數轉成factor
degree=as.factor(injury_degree)
gender=as.factor(gender)
injury_position=as.factor(injury_position)
protection=as.factor(protection)
phone=as.factor(phone)
person=as.factor(person)
qualifications=as.factor(qualifications)
license=as.factor(license)
drinking=as.factor(drinking)
hit=as.factor(hit)
run_away=as.factor(run_away)
age_level=as.factor(age_level)
#重新寫成資料框架
new=data.frame(injury_degree,gender,injury_position,protection,
phone,person,qualifications,license,drinking,hit,
run_away,age_level)
attach(new)
#勝算比公式
or=exp(cbind(OR=coef(model),confint(model)))
#受傷程度
model1=glm(injury_degree~gender,family = binomial,data=new)
summary(model1)
or=exp(cbind(OR=coef(model1),confint(model1)))
or
setwd("C:/Users/User/Desktop/machine-learning/主成分分析")
#主成分分析(PCA)
#read
data = read.csv('Wine.csv')
split = sample.split(data$Customer_Segment, SplitRatio = 0.8)
#train、test
library(caTools)
split = sample.split(data$Customer_Segment, SplitRatio = 0.8)
split = sample.split(data$Customer_Segment, SplitRatio = 0.8)
train_set = subset(data, split == TRUE)
test_set = subset(data, split == FALSE)
#feature scaling
train_set[,-14] = scale(train_set[, -14])
test_set[, -14] = scale(test_set[, -14])
install.packages("caret")
#apply PCA
library(caret)
library(e1071)
#apply PCA
library(caret)
library(e1071)
#pcaComp表示最後提取出的自變數數量
pca = preProcess(x = train_set[, -14], method = 'pca', pcaComp = 2)
train_set = predict(pca, train_set)
train_set = train_set[c(2, 3, 1)] #欄位更換
test_set = predict(pca, test_set)
test_set = test_set[c(2, 3, 1)] #欄位更換
#SVM model
model = svm(formula = Customer_Segment ~ .,
data = train_set,
type = 'C-classification',
kernel = 'linear')
#predict
y_pred = predict(model, test_set[, -3])
#confusion matrix
cm = table(test_set[, 3], y_pred)
cm
set = train_set
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.0075)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.0075)
#網格
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('PC1', 'PC2')
#預測網格
y_grid = predict(model, grid_set)
plot(set[, -3],
main = 'model', xlab('PC1'), ylab('PC2'),
xlim = range(x1), ylim = range(x2))
#等高線
contour(x1, x2, matrix(as.numeric(y_pred), length(x1), length(x2)), add = TRUE)
#等高線
contour(x1, x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
#等高線
contour(x1, x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
#visual(train_set)
library(ElemStatLearn)
set = train_set
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.0075)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.0075)
#網格
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('PC1', 'PC2')
#預測網格
y_grid = predict(model, grid_set)
#畫點
plot(set[, -3],
main = 'model', xlab('PC1'), ylab('PC2'),
xlim = range(x1), ylim = range(x2))
#等高線
contour(x1, x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
#畫點
plot(set[, -3],
main = 'model', xlab('PC1'), ylab('PC2'),
xlim = range(x1), ylim = range(x2))
#主成分分析(PCA)
#不須使用應變數(無監督)
#read
data = read.csv('Wine.csv')
#train、test
library(caTools)
split = sample.split(data$Customer_Segment, SplitRatio = 0.8)
train_set = subset(data, split == TRUE)
test_set = subset(data, split == FALSE)
#feature scaling
train_set[,-14] = scale(train_set[, -14])
test_set[, -14] = scale(test_set[, -14])
#apply PCA
library(caret)
library(e1071)
#pcaComp表示最後提取出的自變數數量
pca = preProcess(x = train_set[, -14], method = 'pca', pcaComp = 2)
train_set = predict(pca, train_set)
train_set = train_set[c(2, 3, 1)] #欄位更換
test_set = predict(pca, test_set)
test_set = test_set[c(2, 3, 1)] #欄位更換
#SVM model
model = svm(formula = Customer_Segment ~ .,
data = train_set,
type = 'C-classification',
kernel = 'linear')
#predict
y_pred = predict(model, test_set[, -3])
#confusion matrix
cm = table(test_set[, 3], y_pred)
#visual(train_set)
library(ElemStatLearn)
set = train_set
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.0075)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.0075)
#網格
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('PC1', 'PC2')
#預測網格
y_grid = predict(model, grid_set)
#畫點
plot(set[, -3],
main = 'model', xlab('PC1'), ylab('PC2'),
xlim = range(x1), ylim = range(x2))
#等高線
contour(x1, x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
#將區域上色
point(grid_set, pch = '.', col = ifelse(y_grid == 2, 'Deepskyblue',
ifelse(y_grid == 1, 'springgreen3', 'tomato')))
#將區域上色
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'Deepskyblue',
ifelse(y_grid == 1, 'springgreen3', 'tomato')))
#主成分分析(PCA)
#不須使用應變數(無監督)
#read
data = read.csv('Wine.csv')
#train、test
library(caTools)
split = sample.split(data$Customer_Segment, SplitRatio = 0.8)
train_set = subset(data, split == TRUE)
test_set = subset(data, split == FALSE)
#feature scaling
train_set[,-14] = scale(train_set[, -14])
test_set[, -14] = scale(test_set[, -14])
#apply PCA
library(caret)
library(e1071)
#pcaComp表示最後提取出的自變數數量
pca = preProcess(x = train_set[, -14], method = 'pca', pcaComp = 2)
train_set = predict(pca, train_set)
train_set = train_set[c(2, 3, 1)] #欄位更換
test_set = predict(pca, test_set)
test_set = test_set[c(2, 3, 1)] #欄位更換
#SVM model
model = svm(formula = Customer_Segment ~ .,
data = train_set,
type = 'C-classification',
kernel = 'linear')
#predict
y_pred = predict(model, test_set[, -3])
#confusion matrix
cm = table(test_set[, 3], y_pred)
#visual(train_set)
library(ElemStatLearn)
set = train_set
#上下左右留白一個單位
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.0075)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.0075)
#網格
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('PC1', 'PC2')
#預測網格
y_grid = predict(model, grid_set)
#畫點
plot(set[, -3],
main = 'model', xlab('PC1'), ylab('PC2'),
xlim = range(x1), ylim = range(x2))
#分界線
contour(x1, x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
#將區域上色
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'Deepskyblue',
ifelse(y_grid == 1, 'springgreen3', 'tomato')))
#將點上色
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'blue3',
ifelse(set[, 3] == 1, 'green4', 'red3')))
#主成分分析(PCA)
#不須使用應變數(無監督)
#read
data = read.csv('Wine.csv')
#train、test
library(caTools)
split = sample.split(data$Customer_Segment, SplitRatio = 0.8)
train_set = subset(data, split == TRUE)
test_set = subset(data, split == FALSE)
#feature scaling
train_set[,-14] = scale(train_set[, -14])
test_set[, -14] = scale(test_set[, -14])
#apply PCA
library(caret)
library(e1071)
#pcaComp表示最後提取出的自變數數量
pca = preProcess(x = train_set[, -14], method = 'pca', pcaComp = 2)
train_set = predict(pca, train_set)
train_set = train_set[c(2, 3, 1)] #欄位更換
test_set = predict(pca, test_set)
test_set = test_set[c(2, 3, 1)] #欄位更換
#SVM model
model = svm(formula = Customer_Segment ~ .,
data = train_set,
type = 'C-classification',
kernel = 'linear')
#predict
y_pred = predict(model, test_set[, -3])
#confusion matrix
cm = table(test_set[, 3], y_pred)
#visual(train_set)
library(ElemStatLearn)
set = train_set
#上下左右留白一個單位
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.0075)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.0075)
#網格
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('PC1', 'PC2')
#預測網格
y_grid = predict(model, grid_set)
#畫點
plot(set[, -3],
main = 'model', xlab('PC1'), ylab('PC2'),
xlim = range(x1), ylim = range(x2))
#分界線
contour(x1, x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
#將區域上色
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'Deepskyblue',
ifelse(y_grid == 1, 'springgreen3', 'tomato')))
#將點上色
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'blue3',
ifelse(set[, 3] == 1, 'green4', 'red3')))
#test_set
library(ElemStatLearn)
set = test_set
#上下左右留白一個單位
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.0075)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.0075)
#網格
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('PC1', 'PC2')
#預測網格
y_grid = predict(model, grid_set)
#畫點
plot(set[, -3],
main = 'model', xlab('PC1'), ylab('PC2'),
xlim = range(x1), ylim = range(x2))
#分界線
contour(x1, x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
#將區域上色
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'Deepskyblue',
ifelse(y_grid == 1, 'springgreen3', 'tomato')))
#將點上色
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'blue3',
ifelse(set[, 3] == 1, 'green4', 'red3')))
